include:
    - project: 'dl/devops/gitlab-ci-slurm'
      ref: master
      file: '/.gitlab-ci.yml'

stages:
  - build
  - test
  - cleanup

variables:
  IMAGE: "gitlab-master.nvidia.com:5005/dl/hugectr/hugectr:devel"
  DATASET: /lustre/fsw/hpc-hugectr/criteo_kaggle
  DATASET_MOUNT: /dataset/criteo_kaggle
  WORK_DIR: /hugectr_ci_workdir
  DEST_FW_IMAGE_VERSIONED: "${CI_REGISTRY}/dl/hugectr/hugectr:devel_${CI_PIPELINE_ID}"
  DEST_FW_IMAGE_VERSIONED_ENROOT: gitlab-master.nvidia.com/dl/hugectr/hugectr:devel_${CI_PIPELINE_ID}

before_script:
  - export TMP_DIR=${CI_PROJECT_DIR}
  - export NCCL_SHM_DISABLE=1
  - export NCCL_LAUNCH_MODE=PARALLEL


### Stage: build
build:
  tags:
    - 1GPU
  stage: build
  script:
    - export JOB_DOCKERFILE="Dockerfile.${CI_JOB_NAME%%--*}.${CI_PIPELINE_ID}" && echo ${JOB_DOCKERFILE}
    - echo "FROM ${IMAGE}" > ${JOB_DOCKERFILE}
    - echo "ARG SM=\"70;75;80\"" >> ${JOB_DOCKERFILE}
    - echo "
      RUN git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab-master.nvidia.com/dl/hugectr/hugectr.git ${WORK_DIR} && cd ${WORK_DIR} && git checkout ${CI_COMMIT_SHA} && git submodule update --init --recursive && mkdir build && cd build && mkdir build_single && cd build_single && cmake -DCMAKE_BUILD_TYPE=Release -DSM=\$SM ../.. && make -j && cd .. && mkdir build_multi_nccl && cd build_multi_nccl && cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_MULTINODES=ON -DSM=\$SM ../.. && make -j && cd .. && mkdir build_multi_gossip && cd build_multi_gossip && cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_MULTINODES=ON -DNCCL_A2A=OFF -DSM=\$SM ../.. && make -j
      " >> ${JOB_DOCKERFILE}
    - cat ${JOB_DOCKERFILE}
    - docker login -u ${CI_PRIVATE_USER} -p "${CI_PRIVATE_KEY}" "${CI_REGISTRY}"
    - docker pull ${IMAGE}
    - docker build --pull
                   -t "${DEST_FW_IMAGE_VERSIONED}"
                   -f "${JOB_DOCKERFILE}"
                   ${PWD}
    - docker push "${DEST_FW_IMAGE_VERSIONED}"


### Stage: test
# unit test
unit_tests:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd ${WORK_DIR}/build/build_single/bin;
        ./layers_test &&
        ./embedding_test &&
        ./checker_test &&
        ./data_reader_test &&
        ./device_map_test &&
        ./heap_test &&
        ./loss_test &&
        ./optimizer_test && 
        ./regularizers_test && 
        ./model_oversubscriber_test &&
        ./parser_test &&
        ./session_test &&
        ./auc_test"

# single node
criteo:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd ${DATASET_MOUNT}/criteo;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_8gpu.json;
        cd /dataset/criteo_kaggle/criteo_multi_slots;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_multi_slots_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_multi_slots_8gpu.json;
        cd /dataset/criteo_kaggle/criteo_parquet_multi_slots;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_parquet_multi_slots_1gpu.json"
  

dcn:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_8gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_localized_embedding_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_localized_embedding_8gpu.json;
        cd /dataset/criteo_kaggle/dcn_parquet;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_distributed_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_distributed_8gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_localized_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_localized_8gpu.json"

wdl_deepfm:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd /dataset/criteo_kaggle/wdl;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/wdl_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/wdl_8gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/wdl_fp16_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/wdl_fp16_8gpu.json;
        cd /dataset/criteo_kaggle/deepfm;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/deepfm_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/deepfm_8gpu.json"
  

dlrm:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_8gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_fp16_1gpu.json;
        ${WORK_DIR}/build/build_single/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_fp16_8gpu.json"
  

# multinode with nccl
criteo_multinode:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=2
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/criteo;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_2node_4gpu.json"


dcn_multinode:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=4
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_4node_2gpu.json"

dcn_multinode_parquet_localized:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=2
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn_parquet;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_localized_2node_4gpu.json"
        
dcn_multinode_parquet_distributed:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=2
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn_parquet;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dcn_parquet_distributed_2node_4gpu.json"

dlrm_multinode_fp16:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=4
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_fp16_4node_2gpu.json"

dlrm_multinode_fp32:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=4
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        ${WORK_DIR}/build/build_multi_nccl/bin/huge_ctr --train ${WORK_DIR}/test/scripts/dlrm_fp32_4node_2gpu.json"

# multinode with gossip
criteo_multinode_gossip:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=2
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/criteo;
        ${WORK_DIR}/build/build_multi_gossip/bin/huge_ctr --train ${WORK_DIR}/test/scripts/criteo_2node_4gpu.json"

# python interface single node
python_interface_single_node:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd /dataset/criteo_kaggle/wdl;
        cp ${WORK_DIR}/build/build_single/lib/hugectr.so ${WORK_DIR}/test/pybind_test/;
        python3 ${WORK_DIR}/test/pybind_test/single_node_wdl_fp16_8gpu.py ${WORK_DIR}/test/scripts/wdl_fp16_8gpu.json;"

# python interface single node + model prefetch
python_interface_single_node_model_prefetch:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd /dataset/criteo_kaggle/wdl_data_keyset;
        cp ${WORK_DIR}/build/build_single/lib/hugectr.so ${WORK_DIR}/test/pybind_test/;
        mkdir ${TMP_DIR}/temp_embedding;
        python3 ${WORK_DIR}/test/pybind_test/model_prefetch_wdl_1gpu.py /dataset/criteo_kaggle/wdl_data_keyset/wdl.json ${TMP_DIR}/temp_embedding"

# python interface multi node + nccl
python_interface_multi_node_nccl:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=4
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/dcn;
        cp ${WORK_DIR}/build/build_multi_nccl/lib/hugectr.so ${WORK_DIR}/test/pybind_test/;
        python3 ${WORK_DIR}/test/pybind_test/multi_node_dcn_4node_2gpu.py ${WORK_DIR}/test/scripts/dcn_4node_2gpu.json"

# python interface multi node + gossip
python_interface_multi_node_gossip:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=2
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        --ntasks-per-node 1
        bash -cx "
        cd /dataset/criteo_kaggle/criteo;
        cp ${WORK_DIR}/build/build_multi_gossip/lib/hugectr.so ${WORK_DIR}/test/pybind_test/;
        python3 ${WORK_DIR}/test/pybind_test/multi_node_criteo_2node_4gpu.py ${WORK_DIR}/test/scripts/criteo_2node_4gpu.json"
    
# embedding_plugin
embedding_plugin1:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd ${WORK_DIR}/test/embedding_plugin_test;
        python3 embedding_plugin_deepfm_main.py --batch_size=16384 --batch_size_eval=4 --n_epochs=1 --gpus 0 --embedding_vec_size=10 --data_path=/dataset/criteo_kaggle/embedding_plugin/"

# embedding_plugin
embedding_plugin2:
  extends: .selene_job
  allow_failure: false
  stage: test
  dependencies: 
    - build
  script:
    - srun --ntasks=1
        --container-image ${DEST_FW_IMAGE_VERSIONED_ENROOT}
        --container-mounts ${DATASET}:${DATASET_MOUNT},${CI_PROJECT_DIR}:${CI_PROJECT_DIR}
        bash -cx "
        cd ${WORK_DIR}/test/embedding_plugin_test;
        python3 embedding_plugin_deepfm_main.py --batch_size=16384 --batch_size_eval=4 --n_epochs=1 --gpus 0 1 3 4 --embedding_vec_size=10 --data_path=/dataset/criteo_kaggle/embedding_plugin/"

cleanup_containerr:
  stage: cleanup
  dependencies:
    - unit_tests
    - criteo
    - dcn
    - wdl_deepfm
    - dlrm
    - criteo_multinode
    - dcn_multinode
    - dcn_multinode_parquet_localized
    - dcn_multinode_parquet_distributed
    - dlrm_multinode_fp16
    - dlrm_multinode_fp32
    - criteo_multinode_gossip
    - python_interface_single_node
    - python_interface_single_node_model_prefetch
    - python_interface_multi_node_nccl
    - python_interface_multi_node_gossip
    - embedding_plugin1
    - embedding_plugin2
  script:
    - bash -cx "curl --request DELETE  --header PRIVATE-TOKEN:${CI_PRIVATE_KEY} https://gitlab-master.nvidia.com/api/v4/projects/36129/registry/repositories/12086/tags/devel_${CI_PIPELINE_ID}"
  when:
    always